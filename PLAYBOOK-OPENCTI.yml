---
- name: SOCaaC PLAYBOOK 5 --- Install OpenCTI Locally
  hosts: localhost
  gather_facts: false
  become: yes
  vars:
    opencti_admin_email: "admin@socaac.io"
    docker_app_folder: "/opt/OpenCTI"
    git_repo_url: "https://github.com/OpenCTI-Platform/docker.git"
    docker_compose_file: "{{ docker_app_folder }}/docker/docker-compose.yml"
    alienvault_api: "<CHANGEME>"
    PHISHUNT_api: "<CHANGEME>"

  tasks:
    - name: Task 1 - Create OpenCTI folder
      ansible.builtin.file:
        path: "{{ docker_app_folder }}"
        state: directory

    - name: Task 2 - Clone OpenCTI git repository
      ansible.builtin.git:
        repo: "{{ git_repo_url }}"
        dest: "{{ docker_app_folder }}/docker"
        force: yes

    - name: Task 3 - Install jq package
      ansible.builtin.package:
        name: jq
        state: present

    - name: Task 4 - Set vm.max_map_count for ElasticSearch
      ansible.builtin.sysctl:
        name: vm.max_map_count
        value: 1048575
        state: present

    - name: Task 5 - Make vm.max_map_count persistent
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        line: "vm.max_map_count=1048575"

    - name: Task 6 - Reload sysctl.conf
      ansible.builtin.command: sysctl -p

    - name: Task 7 - Generate password for OPENCTI_ADMIN_PASSWORD
      ansible.builtin.shell: "tr -dc A-Za-z0-9 </dev/urandom | head -c 13"
      register: generated_password

    - name: Task 8 - Create environment variables file
      ansible.builtin.shell: "touch {{ docker_app_folder }}/docker/.env"

    - name: Task 9 - Generate .env file
      ansible.builtin.blockinfile:
        path: "{{ docker_app_folder }}/docker/.env"
        block: |
          OPENCTI_ADMIN_EMAIL={{ opencti_admin_email }}
          OPENCTI_ADMIN_PASSWORD={{ generated_password.stdout }}
          OPENCTI_ADMIN_TOKEN={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          OPENCTI_BASE_URL=http://localhost:8080
          MINIO_ROOT_USER={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          MINIO_ROOT_PASSWORD={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          RABBITMQ_DEFAULT_USER=guest
          RABBITMQ_DEFAULT_PASS=guest
          ELASTIC_MEMORY_SIZE=4G
          CONNECTOR_HISTORY_ID={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          CONNECTOR_EXPORT_FILE_STIX_ID={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          CONNECTOR_EXPORT_FILE_CSV_ID={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          CONNECTOR_IMPORT_FILE_STIX_ID={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          CONNECTOR_EXPORT_FILE_TXT_ID={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}
          CONNECTOR_IMPORT_DOCUMENT_ID={{ lookup('pipe', 'cat /proc/sys/kernel/random/uuid') }}

          SMTP_HOSTNAME=localhost

    - name: Task 10 - Check if Docker service is running
      ansible.builtin.service:
        name: docker
        state: started
      register: docker_service_status
    - name: Task 11 - Run Docker Compose
      ansible.builtin.command:
        cmd: "docker-compose up -d"
        chdir: "{{ docker_app_folder }}/docker"
      become: yes
      become_user: root
      vars:
        docker_app_folder: "/opt/OpenCTI"

    - name: Task 12 - Print installation & Configruration success message
      ansible.builtin.debug:
        msg: |
          Installation successful - OpenCTI is now running on http://localhost:8080.
          Login with {{ opencti_admin_email }} and {{ generated_password.stdout }}.